{
  "openapi": "3.0.2",
  "info": {
    "version": "1.4.10",
    "title": "Rosetta",
    "description": "Build Once. Integrate Your Blockchain Everywhere.",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "paths": {
    "/network/list": {
      "post": {
        "summary": "Get List of Available Networks",
        "description": "This endpoint returns a list of NetworkIdentifiers that the Rosetta server supports.",
        "operationId": "networkList",
        "tags": [
          "Network"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkListResponse"
                }
              }
            }
          },
          "500": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/network/status": {
      "post": {
        "summary": "Get Network Status",
        "description": "This endpoint returns the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here.",
        "operationId": "networkStatus",
        "tags": [
          "Network"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NetworkRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkStatusResponse"
                }
              }
            }
          },
          "500": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "NetworkIdentifier": {
        "description": "The network_identifier specifies which network a particular object is associated with.",
        "type": "object",
        "required": ["blockchain", "network"],
        "properties": {
          "blockchain": {
            "type": "string",
            "example": "bitcoin"
          },
          "network": {
            "description": "If a blockchain has a specific chain-id or network identifier, it should go in this field. It is up to the client to determine which network-specific identifier is mainnet, preprod, or preview.",
            "type": "string",
            "example": "mainnet"
          },
          "sub_network_identifier": {
            "$ref": "#/components/schemas/SubNetworkIdentifier"
          }
        }
      },
      "SubNetworkIdentifier": {
        "description": "In blockchains with sharded state, the SubNetworkIdentifier is required to query some object on a specific shard. This identifier is optional for all non-sharded blockchains.",
        "type": "object",
        "required": ["network"],
        "properties": {
          "network": {
            "type": "string",
            "example": "shard 1"
          },
          "metadata": {
            "type": "object",
            "example": {
              "producer": "0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5"
            }
          }
        }
      },
      "BlockIdentifier": {
        "description": "The block_identifier uniquely identifies a block in a particular network.",
        "type": "object",
        "required": ["index", "hash"],
        "properties": {
          "index": {
            "description": "This is also known as the block height.",
            "type": "integer",
            "format": "int64",
            "example": 1123941
          },
          "hash": {
            "type": "string",
            "example": "0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85"
          }
        }
      },
      "PartialBlockIdentifier": {
        "type": "object",
        "description": "When fetching data by BlockIdentifier, it may be possible to only specify the index or hash. If neither property is specified, it is assumed that the client is making a request at the current block.",
        "properties": {
          "index": {
            "type": "integer",
            "format": "int64",
            "example": 1123941
          },
          "hash": {
            "type": "string",
            "example": "0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85"
          }
        }
      },
      "TransactionIdentifier": {
        "description": "The transaction_identifier uniquely identifies a transaction in a particular network and block or in the mempool.",
        "type": "object",
        "required": ["hash"],
        "properties": {
          "hash": {
            "description": "Any transactions that are attributable only to a block (ex: a block event) should use the hash of the block as the identifier.",
            "type": "string",
            "example": "0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f"
          }
        }
      },
      "OperationIdentifier": {
        "description": "The operation_identifier uniquely identifies an operation within a transaction.",
        "type": "object",
        "required": ["index"],
        "properties": {
          "index": {
            "description": "The operation index is used to ensure each operation has a unique identifier within a transaction. This index is only relative to the transaction and NOT GLOBAL. The operations in each transaction should start from index 0. To clarify, there may not be any notion of an operation index in the blockchain being described.",
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "example": 5
          },
          "network_index": {
            "description": "Some blockchains specify an operation index that is essential for client use. For example, Bitcoin uses a network_index to identify which UTXO was used in a transaction. network_index should not be populated if there is no notion of an operation index in a blockchain (typically most account-based blockchains).",
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "example": 0
          }
        }
      },
      "AccountIdentifier": {
        "description": "The account_identifier uniquely identifies an account within a network. All fields in the account_identifier are utilized to determine this uniqueness (including the metadata field, if populated).",
        "type": "object",
        "required": ["address"],
        "properties": {
          "address": {
            "description": "The address may be a cryptographic public key (or some encoding of it) or a provided username.",
            "type": "string",
            "example": "0x3a065000ab4183c6bf581dc1e55a605455fc6d61"
          },
          "sub_account": {
            "$ref": "#/components/schemas/SubAccountIdentifier"
          },
          "metadata": {
            "description": "Blockchains that utilize a username model (where the address is not a derivative of a cryptographic public key) should specify the public key(s) owned by the address in metadata.",
            "type": "object",
            "properties": {
              "chain_code": {
                "description": "Hex string encoded extension of bip32 private and public keys with an extra 256 bits of entropy that consists of 32 bytes",
                "type": "string"
              }
            }
          }
        }
      },
      "SubAccountIdentifier": {
        "description": "An account may have state specific to a contract address (ERC-20 token) and/or a stake (delegated balance). The sub_account_identifier should specify which state (if applicable) an account instantiation refers to.",
        "type": "object",
        "required": ["address"],
        "properties": {
          "address": {
            "description": "The SubAccount address may be a cryptographic value or some other identifier (ex: bonded) that uniquely specifies a SubAccount.",
            "type": "string",
            "example": "0x6b175474e89094c44da98b954eedeac495271d0f"
          },
          "metadata": {
            "description": "If the SubAccount address is not sufficient to uniquely specify a SubAccount, any other identifying information can be stored here. It is important to note that two SubAccounts with identical addresses but differing metadata will not be considered equal by clients.",
            "type": "object"
          }
        }
      },
      "Block": {
        "description": "Blocks contain an array of Transactions that occurred at a particular BlockIdentifier. A hard requirement for blocks returned by Rosetta implementations is that they MUST be _inalterable_: once a client has requested and received a block identified by a specific BlockIndentifier, all future calls for that same BlockIdentifier must return the same block contents.",
        "type": "object",
        "required": ["block_identifier", "parent_block_identifier", "timestamp", "transactions"],
        "properties": {
          "block_identifier": {
            "$ref": "#/components/schemas/BlockIdentifier"
          },
          "parent_block_identifier": {
            "$ref": "#/components/schemas/BlockIdentifier"
          },
          "timestamp": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          },
          "metadata": {
            "type": "object",
            "properties": {
              "transactionsCount": { "type": "number" },
              "createdBy": { "type": "string" },
              "size": { "type": "number" },
              "epochNo": { "type": "number" },
              "slotNo": { "type": "number" }
            },
            "example": {
              "transactions_root": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
              "difficulty": "123891724987128947"
            }
          }
        }
      },
      "Transaction": {
        "description": "Transactions contain an array of Operations that are attributable to the same TransactionIdentifier.",
        "type": "object",
        "required": ["transaction_identifier", "operations"],
        "properties": {
          "transaction_identifier": {
            "$ref": "#/components/schemas/TransactionIdentifier"
          },
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Operation"
            }
          },
          "related_transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedTransaction"
            }
          },
          "metadata": {
            "description": "Transactions that are related to other transactions (like a cross-shard transaction) should include the tranaction_identifier of these transactions in the metadata.",
            "type": "object",
            "required": ["size", "scriptSize"],
            "properties": {
              "size": { "type": "number" },
              "scriptSize": { "type": "number" }
            },
            "example": {
              "size": 12378,
              "lockTime": 1582272577
            }
          }
        }
      },
      "Operation": {
        "description": "Operations contain all balance-changing information within a transaction. They are always one-sided (only affect 1 AccountIdentifier) and can succeed or fail independently from a Transaction. Operations are used both to represent on-chain data (Data API) and to construct new transactions (Construction API), creating a standard interface for reading and writing to blockchains.",
        "type": "object",
        "required": ["operation_identifier", "type"],
        "properties": {
          "operation_identifier": {
            "$ref": "#/components/schemas/OperationIdentifier"
          },
          "related_operations": {
            "description": "Restrict referenced related_operations to identifier indices < the current operation_identifier.index. This ensures there exists a clear DAG-structure of relations. Since operations are one-sided, one could imagine relating operations in a single transfer or linking operations in a call tree.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OperationIdentifier"
            },
            "example": [
              {
                "index": 1
              },
              {
                "index": 2
              }
            ]
          },
          "type": {
            "description": "Type is the network-specific type of the operation. Ensure that any type that can be returned here is also specified in the NetworkOptionsResponse. This can be very useful to downstream consumers that parse all block data.",
            "type": "string",
            "example": "Transfer"
          },
          "status": {
            "description": "Status is the network-specific status of the operation. Status is not defined on the transaction object because blockchains with smart contracts may have transactions that partially apply (some operations are successful and some are not). Blockchains with atomic transactions (all operations succeed or all operations fail) will have the same status for each operation. On-chain operations (operations retrieved in the `/block` and `/block/transaction` endpoints) MUST have a populated status field (anything on-chain must have succeeded or failed). However, operations provided during transaction construction (often times called \"intent\" in the documentation) MUST NOT have a populated status field (operations yet to be included on-chain have not yet succeeded or failed).",
            "type": "string",
            "example": "Reverted"
          },
          "account": {
            "$ref": "#/components/schemas/AccountIdentifier"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "coin_change": {
            "$ref": "#/components/schemas/CoinChange"
          },
          "metadata": {
            "$ref": "#/components/schemas/OperationMetadata",
            "example": {
              "staking_credential": {
                "hex_bytes": "1B400D60AAF34EAF6DCBAB9BBA46001A23497886CF11066F7846933D30E5AD3F",
                "curve_type": "edwards25519"
              },
              "payment_key": {
                "hex_bytes": "1B400D60AAF34EAF6DCBAB9BBA46001A23497886CF11066F7846933D30E5AD3F",
                "curve_type": "edwards25519"
              },
              "asm": "304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01 03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2",
              "hex": "48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2"
            }
          }
        }
      },
      "OperationMetadata": {
        "description": "Metadata related to Cardano operations",
        "type": "object",
        "properties": {
          "withdrawalAmount": {
            "description": "If it's a withdrawal operation, the amount will re returned here.",
            "$ref": "#/components/schemas/Amount"
          },
          "depositAmount": {
            "description": "If it's a registration operation, the amount will re returned here.",
            "$ref": "#/components/schemas/Amount"
          },
          "refundAmount": {
            "description": "If it's a deregistration operation, the amount will re returned here.",
            "$ref": "#/components/schemas/Amount"
          },
          "staking_credential": {
            "$ref": "#/components/schemas/PublicKey"
          },
          "pool_key_hash": {
            "type": "string"
          },
          "epoch": {
            "type": "number"
          },
          "tokenBundle": {
            "description": "A token bundle is a heterogeneous (‘mixed’) collection of tokens. Any tokens can be bundled together. Token bundles are the standard - and only - way to represent and store assets on the Cardano blockchain.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenBundleItem"
            }
          },
          "poolRegistrationCert": {
            "description": "Certificate of a pool registration encoded as hex string",
            "type": "string"
          },
          "poolRegistrationParams": {
            "$ref": "#/components/schemas/PoolRegistrationParams"
          },
          "voteRegistrationMetadata": {
            "description": "A Catalyst registration transaction is a regular Cardano transaction with a specific transaction metadata associated with it.",
            "$ref": "#/components/schemas/VoteRegistrationMetadata"
          }
        }
      },
      "VoteRegistrationMetadata": {
        "description": "Catalyst registration metadata format",
        "type": "object",
        "required": ["stakeKey","votingKey", "rewardAddress", "votingNonce", "votingSignature"],
        "properties": {
          "stakeKey": {
            "description": "The staking key on the Cardano network",
            "$ref": "#/components/schemas/PublicKey"
          },
          "votingKey": {
            "description": "Catalyst voting key",
            "$ref": "#/components/schemas/PublicKey"
          },
          "rewardAddress": {
            "description": "Shelley address to receive rewards",
            "type": "string"
          },
          "votingNonce": {
            "description": "Unsigned integer (of CBOR major type 0). Current slot number",
            "type" : "number"
          },
          "votingSignature": {
            "description": "ED25119 signature CBOR byte array of blake2b-256 hash of the registration metadata signed using the staking key",
            "type": "string"
          }
        }
      },
      "PoolRegistrationParams": {
        "type": "object",
        "required": ["vrfKeyHash", "pledge", "cost", "poolOwners", "relays", "rewardAddress"],
        "properties": {
          "vrfKeyHash": {
            "type": "string"
          },
          "rewardAddress": {
            "type": "string"
          },
          "pledge": {
            "description": "Lovelace amount to pledge",
            "type": "string"
          },
          "cost": {
            "description": "Operational costs per epoch lovelace",
            "type": "string"
          },
          "poolOwners": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "relays": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relay"
            }
          },
          "margin": {
            "$ref": "#/components/schemas/PoolMargin"
          },
          "margin_percentage": {
            "type": "string"
          },
          "poolMetadata": {
            "$ref": "#/components/schemas/PoolMetadata"
          }
        }
      },
      "Relay": {
        "type": "object",
        "properties": {
          "type": { "type": "string" },
          "ipv4": {
            "type": "string",
            "example": "127.0.0.1"
          },
          "ipv6": {
            "type": "string",
            "example": "2345:0425:2ca1:0000:0000:0567:5673:23b5"
          },
          "dnsName": {
            "type": "string"
          },
          "port": {
            "type": "string"
          }
        }
      },
      "PoolMargin": {
        "type": "object",
        "required": ["numerator", "denominator"],
        "properties": {
          "numerator": {
            "type": "string"
          },
          "denominator": {
            "type": "string"
          }
        }
      },
      "PoolMetadata": {
        "type": "object",
        "required": ["url", "hash"],
        "properties": {
          "url": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          }
        }
      },
      "TokenBundleItem": {
        "type": "object",
        "required": ["policyId", "tokens"],
        "properties": {
          "policyId": {
            "description": "Policy Id hex string",
            "type": "string"
          },
          "tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Amount"
            }
          }
        }
      },
      "Amount": {
        "description": "Amount is some Value of a Currency. It is considered invalid to specify a Value without a Currency.",
        "type": "object",
        "required": ["value", "currency"],
        "properties": {
          "value": {
            "description": "Value of the transaction in atomic units represented as an arbitrary-sized signed integer. For example, 1 BTC would be represented by a value of 100000000.",
            "type": "string",
            "example": "1238089899992"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "Utxo": {
        "description": "Unspent set for a given Account",
        "type": "object",
        "required": ["value", "index", "transactionHash"],
        "properties": {
          "value": { "type": "string" },
          "index": { "type": "number" },
          "transactionHash": { "type": "string" }
        }
      },
      "Currency": {
        "description": "Currency is composed of a canonical Symbol and Decimals. This Decimals value is used to convert an Amount.Value from atomic units (Satoshis) to standard units (Bitcoins).",
        "type": "object",
        "required": ["symbol", "decimals"],
        "properties": {
          "symbol": {
            "description": "Canonical symbol associated with a currency.",
            "type": "string",
            "example": "BTC"
          },
          "decimals": {
            "description": "Number of decimal places in the standard unit representation of the amount. For example, BTC has 8 decimals. Note that it is not possible to represent the value of some currency in atomic units that is not base 10.",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "example": 8
          },
          "metadata": {}
        }
      },
      "SyncStatus": {
        "description": "SyncStatus is used to provide additional context about an implementation's sync status. This object is often used by implementations to indicate healthiness when block data cannot be queried until some sync phase completes or cannot be determined by comparing the timestamp of the most recent block with the current time.",
        "type": "object",
        "properties": {
          "current_index": {
            "description": "CurrentIndex is the index of the last synced block in the current stage. This is a separate field from current_block_identifier in NetworkStatusResponse because blocks with indices up to and including the current_index may not yet be queryable by the caller. To reiterate, all indices up to and including current_block_identifier in NetworkStatusResponse must be queryable via the /block endpoint (excluding indices less than oldest_block_identifier).",
            "type": "integer",
            "format": "int64",
            "example": 100
          },
          "target_index": {
            "description": "TargetIndex is the index of the block that the implementation is attempting to sync to in the current stage.",
            "type": "integer",
            "format": "int64",
            "example": 150
          },
          "stage": {
            "description": "Stage is the phase of the sync process.",
            "type": "string",
            "example": "header sync"
          },
          "synced": {
            "description": "sycned is a boolean that indicates if an implementation has synced up to the most recent block. If this field is not populated, the caller should rely on a traditional tip timestamp comparison to determine if an implementation is synced. This field is particularly useful for quiescent blockchains (blocks only produced when there are pending transactions). In these blockchains, the most recent block could have a timestamp far behind the current time but the node could be healthy and at tip.",
            "type": "boolean"
          }
        }
      },
      "Peer": {
        "description": "A Peer is a representation of a node's peer.",
        "type": "object",
        "required": ["peer_id"],
        "properties": {
          "peer_id": {
            "type": "string",
            "example": "0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5"
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "Version": {
        "description": "The Version object is utilized to inform the client of the versions of different components of the Rosetta implementation.",
        "type": "object",
        "required": ["rosetta_version", "node_version"],
        "properties": {
          "rosetta_version": {
            "description": "The rosetta_version is the version of the Rosetta interface the implementation adheres to. This can be useful for clients looking to reliably parse responses.",
            "type": "string",
            "example": "1.2.5"
          },
          "node_version": {
            "description": "The node_version is the canonical version of the node runtime. This can help clients manage deployments.",
            "type": "string",
            "example": "1.0.2"
          },
          "middleware_version": {
            "description": "When a middleware server is used to adhere to the Rosetta interface, it should return its version here. This can help clients manage deployments.",
            "type": "string",
            "example": "0.2.7"
          },
          "metadata": {
            "description": "Any other information that may be useful about versioning of dependent services should be returned here.",
            "type": "object"
          }
        }
      },
      "Allow": {
        "description": "Allow specifies supported Operation status, Operation types, and all possible error statuses. This Allow object is used by clients to validate the correctness of a Rosetta Server implementation. It is expected that these clients will error if they receive some response that contains any of the above information that is not specified here.",
        "type": "object",
        "required": [
          "operation_statuses",
          "operation_types",
          "errors",
          "historical_balance_lookup",
          "call_methods",
          "balance_exemptions",
          "mempool_coins"
        ],
        "properties": {
          "operation_statuses": {
            "description": "All Operation.Status this implementation supports. Any status that is returned during parsing that is not listed here will cause client validation to error.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OperationStatus"
            }
          },
          "operation_types": {
            "description": "All Operation.Type this implementation supports. Any type that is returned during parsing that is not listed here will cause client validation to error.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "TRANSFER"
            }
          },
          "errors": {
            "description": "All Errors that this implementation could return. Any error that is returned during parsing that is not listed here will cause client validation to error.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          },
          "historical_balance_lookup": {
            "type": "boolean",
            "description": "Any Rosetta implementation that supports querying the balance of an account at any height in the past should set this to true."
          },
          "timestamp_start_index": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "description": "If populated, `timestamp_start_index` indicates the first block index where block timestamps are considered valid (i.e. all blocks less than `timestamp_start_index` could have invalid timestamps). This is useful when the genesis block (or blocks) of a network have timestamp 0. If not populated, block timestamps are assumed to be valid for all available blocks."
          },
          "call_methods": {
            "type": "array",
            "description": "All methods that are supported by the /call endpoint. Communicating which parameters should be provided to /call is the responsibility of the implementer (this is en lieu of defining an entire type system and requiring the implementer to define that in Allow).",
            "items": {
              "type": "string",
              "example": "eth_call"
            }
          },
          "balance_exemptions": {
            "type": "array",
            "description": "BalanceExemptions is an array of BalanceExemption indicating which account balances could change without a corresponding Operation. BalanceExemptions should be used sparingly as they may introduce significant complexity for integrators that attempt to reconcile all account balance changes. If your implementation relies on any BalanceExemptions, you MUST implement historical balance lookup (the ability to query an account balance at any BlockIdentifier).",
            "items": {
              "$ref": "#/components/schemas/BalanceExemption"
            }
          },
          "mempool_coins": {
            "type": "boolean",
            "description": "Any Rosetta implementation that can update an AccountIdentifier's unspent coins based on the contents of the mempool should populate this field as true. If false, requests to `/account/coins` that set `include_mempool` as true will be automatically rejected."
          }
        }
      },
      "OperationStatus": {
        "description": "OperationStatus is utilized to indicate which Operation status are considered successful.",
        "type": "object",
        "required": ["status", "successful"],
        "properties": {
          "status": {
            "description": "The status is the network-specific status of the operation.",
            "type": "string"
          },
          "successful": {
            "description": "An Operation is considered successful if the Operation.Amount should affect the Operation.Account. Some blockchains (like Bitcoin) only include successful operations in blocks but other blockchains (like Ethereum) include unsuccessful operations that incur a fee. To reconcile the computed balance from the stream of Operations, it is critical to understand which Operation.Status indicate an Operation is successful and should affect an Account.",
            "type": "boolean"
          }
        },
        "example": {
          "status": "SUCCESS",
          "successful": true
        }
      },
      "Timestamp": {
        "description": "The timestamp of the block in milliseconds since the Unix Epoch. The timestamp is stored in milliseconds because some blockchains produce blocks more often than once a second.",
        "type": "integer",
        "format": "int64",
        "minimum": 0,
        "example": 1582833600000
      },
      "AddressType": {
        "description": "* Base address - associated to a payment and a staking credential, * Reward address - associated to a staking credential * Enterprise address - holds no delegation rights and will be created when no stake key is sent to the API",
        "type": "string"
      },
      "PublicKey": {
        "description": "PublicKey contains a public key byte array for a particular CurveType encoded in hex. Note that there is no PrivateKey struct as this is NEVER the concern of an implementation.",
        "type": "object",
        "required": ["hex_bytes", "curve_type"],
        "properties": {
          "hex_bytes": {
            "type": "string",
            "description": "Hex-encoded public key bytes in the format specified by the CurveType."
          },
          "curve_type": {
            "$ref": "#/components/schemas/CurveType"
          }
        }
      },
      "CurveType": {
        "description": "CurveType is the type of cryptographic curve associated with a PublicKey. * secp256k1: SEC compressed - `33 bytes` (https://secg.org/sec1-v2.pdf#subsubsection.2.3.3) * secp256r1: SEC compressed - `33 bytes` (https://secg.org/sec1-v2.pdf#subsubsection.2.3.3) * edwards25519: `y (255-bits) || x-sign-bit (1-bit)` - `32 bytes` (https://ed25519.cr.yp.to/ed25519-20110926.pdf) * tweedle: 1st pk : Fq.t (32 bytes) || 2nd pk : Fq.t (32 bytes) (https://github.com/CodaProtocol/coda/blob/develop/rfcs/0038-rosetta-construction-api.md#marshal-keys)",
        "type": "string",
        "enum": ["secp256k1", "secp256r1", "edwards25519", "tweedle"]
      },
      "SigningPayload": {
        "description": "SigningPayload is signed by the client with the keypair associated with an AccountIdentifier using the specified SignatureType. SignatureType can be optionally populated if there is a restriction on the signature scheme that can be used to sign the payload.",
        "type": "object",
        "required": ["hex_bytes"],
        "properties": {
          "address": {
            "type": "string",
            "description": "[DEPRECATED by `account_identifier` in `v1.4.4`] The network-specific address of the account that should sign the payload."
          },
          "account_identifier": {
            "$ref": "#/components/schemas/AccountIdentifier"
          },
          "hex_bytes": {
            "type": "string"
          },
          "signature_type": {
            "$ref": "#/components/schemas/SignatureType"
          }
        }
      },
      "Signature": {
        "description": "Signature contains the payload that was signed, the public keys of the keypairs used to produce the signature, the signature (encoded in hex), and the SignatureType. PublicKey is often times not known during construction of the signing payloads but may be needed to combine signatures properly.",
        "type": "object",
        "required": ["signing_payload", "public_key", "signature_type", "hex_bytes"],
        "properties": {
          "signing_payload": {
            "$ref": "#/components/schemas/SigningPayload"
          },
          "public_key": {
            "$ref": "#/components/schemas/PublicKey"
          },
          "signature_type": {
            "$ref": "#/components/schemas/SignatureType"
          },
          "hex_bytes": {
            "type": "string"
          }
        }
      },
      "SignatureType": {
        "description": "SignatureType is the type of a cryptographic signature. * ecdsa: `r (32-bytes) || s (32-bytes)` - `64 bytes` * ecdsa_recovery: `r (32-bytes) || s (32-bytes) || v (1-byte)` - `65 bytes` * ed25519: `R (32-byte) || s (32-bytes)` - `64 bytes` * schnorr_1: `r (32-bytes) || s (32-bytes)` - `64 bytes`  (schnorr signature implemented by Zilliqa where both `r` and `s` are scalars encoded as `32-bytes` values, most significant byte first.) * schnorr_poseidon: `r (32-bytes) || s (32-bytes)` where s = Hash(1st pk || 2nd pk || r) - `64 bytes`  (schnorr signature w/ Poseidon hash function implemented by O(1) Labs where both `r` and `s` are scalars encoded as `32-bytes` values, least significant byte first. https://github.com/CodaProtocol/signer-reference/blob/master/schnorr.ml )",
        "type": "string",
        "enum": ["ecdsa", "ecdsa_recovery", "ed25519", "schnorr_1", "schnorr_poseidon"]
      },
      "CoinAction": {
        "description": "CoinActions are different state changes that a Coin can undergo. When a Coin is created, it is coin_created. When a Coin is spent, it is coin_spent. It is assumed that a single Coin cannot be created or spent more than once.",
        "type": "string",
        "enum": ["coin_created", "coin_spent"]
      },
      "CoinIdentifier": {
        "description": "CoinIdentifier uniquely identifies a Coin.",
        "type": "object",
        "required": ["identifier"],
        "properties": {
          "identifier": {
            "description": "Identifier should be populated with a globally unique identifier of a Coin. In Bitcoin, this identifier would be transaction_hash:index.",
            "type": "string",
            "example": "0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1"
          }
        }
      },
      "CoinChange": {
        "description": "CoinChange is used to represent a change in state of a some coin identified by a coin_identifier. This object is part of the Operation model and must be populated for UTXO-based blockchains. Coincidentally, this abstraction of UTXOs allows for supporting both account-based transfers and UTXO-based transfers on the same blockchain (when a transfer is account-based, don't populate this model).",
        "type": "object",
        "required": ["coin_identifier", "coin_action"],
        "properties": {
          "coin_identifier": {
            "$ref": "#/components/schemas/CoinIdentifier"
          },
          "coin_action": {
            "$ref": "#/components/schemas/CoinAction"
          }
        }
      }
    }
  }
}
